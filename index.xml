<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>hazelcast-examples (0.0.1)</title>
<date>2018-12-04 04:41:45 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2018-12-04 04:41:45 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<chapter xml:id="introduction">
<title>Introduction</title>
<formalpara>
<title>docker / docker-compose</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./mvnw</programlisting>
</para>
</formalpara>
<simpara>Resources:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://hazelcast.org/getting-started-with-hazelcast/">Hazelcast getting started</link></simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="implementation">
<title>Implementation</title>
<section xml:id="app">
<title>app</title>
<simpara>TODO&#8230;&#8203;</simpara>
</section>
<section xml:id="pub-sub">
<title>pub-sub</title>
<literallayout class="monospaced">  public static final HazelcastInstance instance = createInstance();
  public static final HazelcastInstance client = createClient();
@Slf4j
@Configuration
class PubSubHzCfg {
  @Bean(name = "hzInstance", destroyMethod = "shutdown")
  HazelcastInstance hzInstance() {
    return Hz.instance;
  }</literallayout>
<literallayout class="monospaced">@Bean(name = "domainEventsTopic")
ITopic&lt;DomainEvent&gt; domainEventsTopic(@Qualifier("hzInstance") final HazelcastInstance hzInstance) {
  return hzInstance.getTopic("domainEventsTopic");
}</literallayout>
<literallayout class="monospaced">  @Bean
  ApplicationRunner applicationRunner(@Qualifier("domainEventsTopic") final ITopic&lt;DomainEvent&gt; domainEventsTopic) {
    return args -&gt; domainEventsTopic.addMessageListener(
        message -&gt; log.info("received message: {}",
                            message.getMessageObject(),
                            message.getPublishingMember(),
                            new Date(message.getPublishTime())));
  }
}
    final String topicName = "domainEventsTopic";
    final HazelcastInstance client = Hz.client;
    final Function&lt;String, ITopic&lt;DomainEvent&gt;&gt; topic = client::getTopic;
    final Function&lt;String, DomainEvent&gt; data = message -&gt; DomainEvent
        .builder()
        .createdAt(LocalDateTime.now())
        .type(DomainEvent.Type.NONE)
        .jsonData(JSON.stringify(singletonMap("message", message)))
        .build();</literallayout>
<literallayout class="monospaced">if (args.length &gt; 0) {
  final String message = String.join("", args);
  topic.apply(topicName)
       .publish(data.apply(message));
}</literallayout>
</section>
<section xml:id="kryo-subzero">
<title>kryo (subzero)</title>
<literallayout class="monospaced">public static final Config config = createConfig();</literallayout>
<literallayout class="monospaced">  private static Config createConfig() {
    final Config config = new Config();
    SubZero.useAsGlobalSerializer(config);
    return config;
  }
@Value
@Builder
@JsonIgnoreProperties(ignoreUnknown = true)
public class DomainEvent /* implements Serializable */ {
  public enum Type {
    NONE
  }</literallayout>
<literallayout class="monospaced">  // we don't need any serialization, because SubZero Kryo was added globally
  // // private static final long serialVersionUID = -3158689686565990234L;
  @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:s")
  @JsonDeserialize(using = LocalDateTimeDeserializer.class)
  @JsonSerialize(using = LocalDateTimeSerializer.class)
  final LocalDateTime createdAt;
  final Type type;
  final String jsonData;
}</literallayout>
<programlisting language="bash" linenumbering="unnumbered">./mvnw clean install -f ./subzero-kryo-app/pom.xml
./subzero-kryo-app/subzero-kryo-app-backend/target/*.jar &amp;
http :8080 ololo=trololo
http :8080 hoho=oho
http :8080</programlisting>
<simpara>TODO: implement documentation&#8230;&#8203;</simpara>
</section>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/hazelcast-examples">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/hazelcast-examples">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>